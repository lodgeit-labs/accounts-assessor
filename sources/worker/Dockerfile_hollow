FROM koo5/ubuntu
ARG APPDIR
ARG APPPATH






# build prolog


WORKDIR /app/

RUN     apt-get install -y \
        git \
        build-essential cmake ninja-build pkg-config \
        ncurses-dev libreadline-dev libedit-dev \
        libunwind-dev \
        libgmp-dev \
        libssl-dev \
        unixodbc-dev \
        zlib1g-dev libarchive-dev \
        libossp-uuid-dev \
        libxext-dev libice-dev libjpeg-dev libxinerama-dev libxft-dev \
        libxpm-dev libxt-dev \
        libdb-dev \
        libpcre3-dev \
        libpcre2-8-0 libpcre2-dev \
        libyaml-dev \
        libtcmalloc-minimal4

RUN chown myuser:myuser /app/
RUN chown -R myuser:myuser /home/myuser
RUN ls -thrlsa /home/myuser/
RUN touch /home/myuser/.gitconfig
RUN chown -R myuser:myuser /home/myuser
#RUN ls -thrlsa /home/myuser/.gitconfig
#RUN df -Tha

USER myuser

RUN git config --global --add safe.directory /app/swipl/packages/xpce

RUN uname -a
RUN gcc -v 2>&1

#RUN git clone --depth 1 -b master  "https://github.com/SWI-Prolog/swipl-devel.git"       swipl
#RUN git clone --branch V8.3.10 https://github.com/SWI-Prolog/swipl.git swipl
#RUN git clone --branch V8.1.15 https://github.com/SWI-Prolog/swipl.git swipl
#RUN git clone --recurse-submodules  --depth 1 -b V8.3.28  "https://github.com/koo5/swipl-devel.git"       swipl
RUN git clone --recurse-submodules  --depth 1 -b V9.3.0  "https://github.com/SWI-Prolog/swipl.git"       swipl

WORKDIR swipl
#RUN git reset a624386fa4c4718866a906e597e92b8b1b048382 --hard
#RUN git submodule update --init --recursive

#RUN git remote add koo5 "https://github.com/koo5/swipl-devel.git"
#RUN git fetch koo5
#RUN git cherry-pick -n koo5/dev1
##RUN git cherry-pick -n origin/dev1

#RUN git clone "https://github.com/SWI-Prolog/swipl-devel.git" 	 swipl
#RUN git reset 32f8079a1c6d9651d0825dcadce9f80231b01648 --hard
#RUN git submodule update --init --recursive

#RUN git checkout V8.3.20
#RUN git checkout 9defc51a1e328f095c6e51bb41693d2115ab0cff
#RUN git checkout 6d26b69c9f1ce6304683e86afc5bcf1621150524
#RUN git submodule update --init --recursive

WORKDIR packages/xpce
RUN git remote add koo5 https://github.com/koo5/packages-xpce.git #
RUN git fetch koo5
RUN git cherry-pick -n koo5/more_eye_friendly_gtrace_color_theme5
#RUN git cherry-pick -n koo5/dev1

WORKDIR /app/swipl
RUN mkdir build
WORKDIR build
RUN cmake -G Ninja ..
RUN ninja
RUN ctest -j 24 --output-on-failure; true
USER root
RUN ninja install

USER myuser
WORKDIR $APPPATH

COPY init_prolog.sh .
RUN ./init_prolog.sh
USER root






VOLUME /app/server_root/tmp
VOLUME /app/cache
#VOLUME /root/.config/swi-prolog/xpce/


RUN mkdir -p /app/server_root/control
RUN chown -R myuser:myuser /app/server_root/






# python requirements (common block)
USER myuser:myuser
WORKDIR $APPPATH
# this needs to be one or the other
#COPY $APPDIR/requirements.txt .
COPY $APPDIR/requirements-dev.txt .
#RUN PYTHONUSERBASE=/home/myuser/.local python3 -m pip install --upgrade --ignore-installed --user --no-cache-dir -r requirements.txt
RUN PYTHONUSERBASE=/home/myuser/.local python3 -m pip install --upgrade --ignore-installed --user --no-cache-dir -r requirements-dev.txt
USER root






# remoulade (common block)

RUN apt-get install -y libpq-dev
# this has to be made writeable because python wants to write it's eggs in there
COPY --chown=myuser:myuser common/libs/remoulade/ /app/sources/common/libs/remoulade/
USER myuser:myuser
RUN PYTHONUSERBASE=/home/myuser/.local python3 -m pip install -v --upgrade --ignore-installed --user /app/sources/common/libs/remoulade/[rabbitmq,redis,postgres]

# ^todo is this still true?
# ^todo actually use a venv?






WORKDIR $APPPATH
USER myuser
CMD ["./start.sh"]
ENV HC="curl -L -S --fail http://127.0.0.1:1111/health --fail" 





#start interval is the time between health checks during the start period. This option requires Docker Engine version 25.0 or later.
HEALTHCHECK --interval=2s --timeout=600s CMD { test -f /healthcheck/ok && echo -n "sleep.." && sleep 555 && echo -n "hc..>> " && /bin/sh -c '/bin/sh -c "$HC"' && echo -n " <<..hc passed." ; } || { echo -n "hc..>> " && echo -n "$HC" && echo -n " <<... " && /bin/sh -c '/bin/sh -c "$HC"' && echo -n " << first hc passed." && touch /healthcheck/ok && echo " flag stored." ; } 
