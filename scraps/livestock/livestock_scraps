
	
/* livestock SCRAPS: */	
	
	
/*
livestock event types:
	dayEndCount 
	born        
	loss        
	rations     
*/
/*
preprocess_livestock_event(Event) :-
	

rations:
	Livestock_Account
	debit Equity_Drawings

born/loss
	Livestock_Account
	Assets_1204_Livestock_at_Average_Cost

		the inverse account:
                    {
                      "name": "Livestock at Cost",
                      "code": "1204",
                      "active": false
                    },
                    {

	
*/


/*
one livestock acount with transactions, vectors with different unit types


s_transactions ->
	livestock_events
	trade transactions

livestock_events ->
	livestock account transactions
	inventory value transactions
	equity transactions
	



Stock_on_hand_at_beginning_of_year_count for day
since beginning of year:
	purchases
	born









% Events is a list specific for one unit type

preprocess_livestock_events([E|Events], Count, TransactionsIn, TransactionsOut) :-
	preprocess_livestock_events(Events, CountBefore, TransactionsIn, TransactionsSoFar),
	(
		(
			Events = [],
			(
				E = count(Count, Cost)
			;
				throw("first event has to be day end count")
			),
			% put first transaction with this unit type into the livestock account
			append(TransactionsSoFar, [
				transaction(Day, 'livestock initial count', Livestock, [coord(Unit, Count, 0)]), 
				transaction(Day, 'livestock initial value', Assets_1204_Livestock_at_Cost, Cost)], 
				TransactionsOut)
			
			
		),!
		;
		(
			E = count(DayEndCount),
			(
				DayEndCount = Count,!;
				throw("DayEndCount != Count")
			),
			TransactionsIn = TransactionsOut
		)
	)
	;
	(
		(
			(E = buy(Count, Cost); E = sell(Count, Cost)) -> 
				T = [transaction(Day, 'livestock bought/sold', Livestock, Count),
					 transaction(Day, 'livestock bought/sold', Assets_1203_Livestock_at_Cost, Cost])
				]
			;
			(E = born(C); E = loss(C); E = rations(C)) ->
				average_cost(Day, TransactionsSoFar or Events?, Cost),
				T = [transaction(Day, 'livestock born/loss/rations', Livestock, C),
					 transaction(Day, 'livestock born/loss/rations', Assets_1204_Livestock_at_Average_Cost, Cost])
				]
		),
		append(TransactionsSoFar, T, TransactionsOut),
		Count is CountBefore + C
	).
	
preprocess_livestock_events([], not_used).




% here we just simply count livestock units

livestock_count(Events, UnitType, EndDay, Count) :-
	filter_events(Events, UnitType, EndDay, FilteredEvents),
	livestock_count(FilteredEvents, Count).

% Events is a list specific for one unit type

livestock_count([E|Events], Count) :-
	livestock_count(Events, CountBefore),
	(
		(
			Events = [],
			(
				E = count(Count)
			;
				throw("first event has to be day end count")
			),
		),!
		;
		(
			E = count(DayEndCount),
			(
				DayEndCount = Count,!;
				throw("DayEndCount != Count")
			)
		)
	)
	;
	(
		(
			E = buy(C);
			E = sell(C);
			E = born(C);
			E = loss(C);
			E = rations(C);
		),
		Count is CountBefore + C
	).
	
livestock_count([], not_used).
*/
/*

Expenses_5107_Opening_Inventory__Inventory_at_Cost__Livestock_at_Cost
*/

/*
we avoid count/opening balance for now:
		"count" has to be the first livestock-related event, by date. OK
			actually i have opted for "day end count", to avoid ambiguity. OK
		it is possible to insert another "day end count" at any point for verification purpose. VERIFICATION MUST BE AGAINST AN EXTERNAL LIVESTOCK CALCULATOR I.E. AS PER THE STAND ALONE CALCULATOR YOU ALREADY BUILT. THIS IS THE CRUX OF THE WHOLE PROJECT - VERIFICATION OF FACTS FROM DIFFERENT PERSPECTIVES.
*/


/*fixme: first let us go through all transactions and tag these as an action such as "livestock_sell", 
then try to use the action taxonomy format with exchange account to define this*/
/*
tag_s_transactions([], []).

tag_s_transactions([S_Transaction | S_Transactions], [Tagged | Taggeds]) :-
	s_transaction_type_id(S_Transaction, Type_Id),
	nonvar(Type_Id),
	Tagged = S_Transaction,
	tag_s_transactions(S_Transactions, Taggeds),!.

tag_s_transactions([S_Transaction | S_Transactions], [Tagged | Taggeds]) :-
	% get what unit type was exchanged for the money
	s_transaction_exchanged(S_Transaction, vector([coord(Unit, _, _)])),
	member(Livestock_Units, Unit),
	account_ancestor_id(Accounts, Unit, Livestock),
	S_Transaction = s_transaction(Day, _Type_Id, Vector, Unexchanged_Account_Id, Bases)
	Tagged			= s_transaction(Day, Type_Id, Vector, Unexchanged_Account_Id, Bases)

	*/
	/*
		internal:
		buy,sell
*/
/*

livestock_s_transaction_to_transaction(S_Transaction, UnX_Transaction) :-
	s_transaction_day(S_Transaction, Day), 
	transaction_day(UnX_Transaction, Day),
	transaction_description(UnX_Transaction, "livestock buy/sell"),
	s_transaction_vector(S_Transaction, Vector),
	transaction_vector(S_Transaction, Vector),
	s_transaction_account_id(S_Transaction, UnX_Account), 
	transaction_account_id(UnX_Transaction, UnX_Account).


	    vec_inverse(Vector, Vector_Inverted),

*/
